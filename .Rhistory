rep(colnames(data),lengths)
lengths<-sapply(data[1,],length)
rep(colnames(data),lengths)
data.frame(Dealership=rep(colnames(data),lengths),
lapply(split(data,rownames(data)[row(data)]), unlist),
row.names=NULL)
setwd("~/Desktop/InternPI/Dealership-Scraping")
source("Case study-1.R")
source("Case study-2.R")
source("Case study-3.R")
source("Case study-4.R")
source("Case study-5.R")
source("Case study-6.R")
source("Case study-7.R")
source("Case study-8.R")
source("Case study-9(smart).R")
source("Case study-10.R")
source("Case study-11.R")
source("Case study-12.R")
source("Case study-13.R")
source("Case study-14.R")
source("Case study-15.R")
source("Case study-16.R")
source("Case study-17.R")
source("Case study-19.R")
source("Case study-20.R")
source("Case study-21.R")
source("Case study-22.R")
link_file = read.csv("./DealerInventoryLinks//MAChevInventoryLinks.csv",header=TRUE,stringsAsFactors=FALSE)
links = link_file$Website
check_case <- function(link)
{
if(grepl("SearchResults\\?search=new$",link,ignore.case=T))#1
case = "case1"
else if(grepl("search/new/tp",link,ignore.case = T)) #2
case = "case2"
else if(grepl("new-inventory(/?)$|(/index\\.html?)$",link,ignore.case=T)) #3
case = "case3"
else if(grepl("new_inventory",link,ignore.case=T))  #4
case = "case4"
else if(grepl("new-vehicles",link,ignore.case=T)) #5
case = "case5"
else if(grepl("searchnew\\.aspx$",link,ignore.case=T))#6
case = "case6"
else if(grepl("newsearch/new",link,ignore.case=T)) #7
case = "case7"
else if(grepl("condition=new",link,ignore.case=T)) #8
case = "case8"
else if(grepl("smart.*/new",link,ignore.case=T)) #9
case = "case9"
else if(grepl("For-sale/new",link,ignore.case=T))#10
case = "case10"
else if(grepl("/new-cars-",link,ignore.case=T))#11
case = "case11"
else if(grepl("/view/New/|/view/Make",link,ignore.case=T))#12
case = "case12"
else if(grepl("/NewToyotaCars$",link,ignore.case=T))#13
case = "case13"
else if(grepl("/NewToyotaCars.aspx",link,fixed=T))#14
case = "case14"
else if(grepl("/inventory/new-vehicles",link,fixed=T))#15
case = "case15"
else if(grepl("/New-Inventory.aspx",link,fixed=T))#16
case = "case16"
else if(grepl("vehicle_type=All",link,fixed=T))#17
case = "case17"
else if(grepl("/new-.*inventory.*aspx",link,ignore.case=T))#19
case = "case19"
else if(grepl("/new-chevrolets.aspx$",link,ignore.case = T)) #same code with #19
case = "case19"
else if(grepl("/inventory.aspx",link,fixed = T)) #same code with #19
case = "case19"
else if(grepl("/Inventory/",link, fixed = T)) #20
case = "case20"
else if(grepl("/web/inventory/new",link, fixed = T)) #21
case = "case21"
else if(grepl("/new-cars/for-sale",link, fixed = T)) #22
case = "case22"
else
case = "unknown"
return(case)
}
getData <- function(link,case)
{
print(link)
switch(case,
case1 = alldata.1(link),
case2 = alldata.2(link),
case3 = alldata.3(link),
case4 = alldata.4(link),
case5 = alldata.5(link),
case6 = alldata.6(link),
case7 = alldata.7(link),
case8 = alldata.8(link),
case9 = alldata.9(link),
case10 = alldata.10(link),
case11 = alldata.11(link),
case12 = alldata.12(link),
case13 = alldata.13(link),
case14 = alldata.14(link),
case15 = alldata.15(link),
case16 = alldata.16(link),
case17 = alldata.17(link),
case19 = alldata.19(link),
case20 = alldata.20(link),
case21 = alldata.21(link),
case22 = alldata.22(link))
}
url = "http://foxtoyotaclinton.com/NewToyotaCars"
cardata = alldata.13(url)
cardata = alldata.13(url)
link_file = read.csv("./DealerInventoryLinks//MAToyotaInventoryLinks.csv",header=TRUE,stringsAsFactors=FALSE)
links = link_file$Website
case_ls = unname(sapply(links,check_case))
#to know which cases we should keep working on
link_file$Name[which(case_ls=="unknown")]
link_file$Website[which(case_ls=="unknown")]
if(length(which(case_ls=="unknown"))!=0)
{
nlinks = links[-which(case_ls=="unknown")]
ncase_ls = case_ls[-which(case_ls=="unknown")]
}else{
nlinks = links
ncase_ls = case_ls
}
alldata = mapply(getData,nlinks,ncase_ls)
source("Case study-13.R")
alldata = mapply(getData,nlinks,ncase_ls)
source("Case study-13.R")
alldata = mapply(getData,nlinks,ncase_ls)
source("Case study-13.R")
url = "http://haddadtoyota.com/NewToyotaCars"
cardata = alldata.13(url)
doc = htmlParse(txt, asText = TRUE)
load('toyota.RData')
load('smart.RData')
load('chevrolet.RData')
load('honda.RData')
load('ford.RData')
load('nissan.RData')
nullToNA <- function(x) {
x[sapply(x, is.null)] <- NA
return(x)
}
OEM_list = list(nullToNA(chev_df),nullToNA(toyota_df),nullToNA(smart_df),nullToNA(honda_df),nullToNA(ford_df),nullToNA(nissan_df))
df <- Reduce(function(x, y) rbind(x, y), OEM_list)
df <- df[!duplicated(df$VIN),]
require(xlsx)
load("vindecoder.rda")
getinfo.ford = function(VIN){
vin.year = substr(VIN, 10, 10)
year = yearvin$year[which(yearvin$vincode == vin.year)]
info.vin = substr(VIN, 5,7)
index = fordvin$vin == info.vin
model = fordvin$model[index][1]
trim = fordvin$trim[index][1]
return(c(year = year, model = model, trim = trim))
}
getinfo.honda = function(VIN){
vin.year = substr(VIN, 10, 10)
year = yearvin$year[which(yearvin$vincode == vin.year)]
info.vin = substr(VIN, 4,8)
index = hondavin$vin == info.vin
model = hondavin$model[index][1]
trim = hondavin$trim[index][1]
return(c(year = year, model = model, trim = trim))
}
##NISSAN MATCH
#make = "NISSAN"
#VIN = "JN8AS5MV1CW404903"
#VIN = "5N1AA0NE0FN609280"
getinfo.nissan = function(VIN){
vin.year = substr(VIN, 10, 10)
year = yearvin$year[which(yearvin$vincode == vin.year)]
info.vin = substr(VIN,5,6)
index = nissanvin$vin == info.vin
model = nissanvin$model[index][1]
trim = nissanvin$trim[index][1]
return(c(year = year, model = model, trim = trim))
}
#getinfo.nissan(VIN)
##TOYOTA MATCH
#make = "TOYOTA"
#VIN = "4T4BF1FK3FR448855"
#VIN = "5TDYK3DC8FS634133"
#VIN = "JTDKN3DU0F0432010"
getinfo.toyota = function(VIN){
vin.year = substr(VIN, 10, 10)
year = yearvin$year[which(yearvin$vincode == vin.year)]
info.vin = substr(VIN,4,8)
index = toyotavin$vin == info.vin
model = toyotavin$model[index][1]
trim = toyotavin$trim[index][1]
return(c(year = year, model = model, trim = trim))
}
#getinfo.toyota(VIN)
##CHEVROLET
#make = "CHEVROLET"
#VIN = "3N63M0YN0FK709902"
getinfo.chevronlet = function(VIN){
vin.year = substr(VIN, 10, 10)
year = yearvin$year[which(yearvin$vincode == vin.year)]
info.vin = substr(VIN,4,6)
if(substr(info.vin,3,3) %in% c(1:6)){
info.vin.p = substr(VIN,4,5)
index = chev.p$vin == info.vin.p
model = chev.p$model[index][1]
trim = chev.p$trim[index][1]
if(is.na(model)== TRUE){
info.vin.t = substr(VIN,5,6)
index = chev.t$vin == info.vin.t
model = chev.t$model[index][1]
trim = chev.t$trim[index][1]
}
}
else{
info.vin.t = substr(VIN,5,6)
index = chev.t$vin == info.vin.t
model = chev.t$model[index][1]
trim = chev.t$trim[index][1]
}
return(c(year = year, model = model, trim = trim))
}
######Main
getinfo = function(make, VIN){
print(VIN)
if(is.na(make)){
year = NA
trim = "NA"
model = "NA"
}
else if(make=="CHEVROLET"){
year = as.numeric(getinfo.chevronlet(VIN)["year"])
trim = getinfo.chevronlet(VIN)["trim"]
model = getinfo.chevronlet(VIN)["model"]
}
else if(make=="FORD"){
year = as.numeric(getinfo.ford(VIN)["year"])
trim = getinfo.ford(VIN)["trim"]
model = getinfo.ford(VIN)["model"]
}
else if(make=="NISSAN"){
year = as.numeric(getinfo.nissan(VIN)["year"])
trim = getinfo.nissan(VIN)["trim"]
model = getinfo.nissan(VIN)["model"]
}
else if(make=="HONDA"){
year = as.numeric(getinfo.honda(VIN)["year"])
trim = getinfo.honda(VIN)["trim"]
model = getinfo.honda(VIN)["model"]
}
else if(make=="TOYOTA"){
year = as.numeric(getinfo.toyota(VIN)["year"])
trim = getinfo.toyota(VIN)["trim"]
model = getinfo.toyota(VIN)["model"]
}
return(c(year = year, model = model, trim = trim, VIN = VIN))
}
test.decoder = function(df){
alldata = mapply(getinfo, make=df$Make, VIN = df$VIN)
tt=t(as.data.frame(alldata, row.names=NULL,stringsAsFactors = F))
rownames(tt) = NULL
tt = as.data.frame(tt, stringsAsFactors = F)
return(tt)
}
load("df.rdata")
View(df)
df$Make = toupper(df$Make)
testdecoder = test.decoder(df)
load("~/Desktop/InternPI/Dealership-Scraping/newdf.rdata")
View(newdf)
load("~/Desktop/InternPI/Dealership-Scraping/newdf.rdata")
View(hondavin)
View(df)
ndf <- Reduce(function(x, y) rbind(x, y), OEM_list)
ndf <- ndf[!duplicated(ndf$VIN),]
df <- ndf
save(df,file='ndf.RData')
library(shiny)
load("ndf.rdata")
df$Make = toupper(df$Make)
testdecoder = test.decoder(df)
testdecoder = test.decoder(df)
testdecoder = test.decoder(df)
df$Make = toupper(df$Make)
testdecoder = test.decoder(df)
testdecoder = test.decoder(df)
make
VIN
make
testdecoder = test.decoder(df)
testdecoder = test.decoder(df)
testdecoder = test.decoder(df)
testdecoder = test.decoder(df)
testdecoder = test.decoder(df)
testdecoder = test.decoder(df)
testdecoder = test.decoder(df)
testdecoder = test.decoder(df)
length(dots)
names(dots)
dots$make
tail(dots$VIN)
which(dots$VIN=="5N1AT2MV8FC909474")
dots$make[50720]
load('toyota.RData')
OEM_list = list(nullToNA(chev_df),nullToNA(toyota_df),nullToNA(smart_df),nullToNA(honda_df),nullToNA(ford_df),nullToNA(nissan_df))
ndf <- Reduce(function(x, y) rbind(x, y), OEM_list)
ndf <- ndf[!duplicated(ndf$VIN),]
df <- ndf
dim(df)
save(df,file='ndf.RData')
testdecoder = test.decoder(df)
library(shiny)
runApp()
runApp()
runApp()
setwd("~/Desktop/InternPI/Dealership-Scraping")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
link_file = read.csv("./DealerInventoryLinks//MAChevInventoryLinks.csv",header=TRUE,stringsAsFactors=FALSE)
links = link_file$Website
case_ls = unname(sapply(links,check_case))
link_file$Website[which(case_ls=="unknown")]
dim(chev_df)
colnames(chev_df) <- link_file$Name
if(length(which(case_ls=="unknown"))!=0)
{
nlinks = links[-which(case_ls=="unknown")]
ncase_ls = case_ls[-which(case_ls=="unknown")]
}else{
nlinks = links
ncase_ls = case_ls
}
alldata = mapply(getData,nlinks,ncase_ls)
colnames(alldata) <- link_file$Name
alldata_df = getDataframe(alldata)
getDataframe <-function(alldata){
lengths<-sapply(alldata[1,],length)
data.frame(Dealership=rep(colnames(alldata),lengths),
lapply(split(alldata,rownames(alldata)[row(alldata)]), unlist),
row.names=NULL,stringsAsFactors = F)
}
alldata_df = getDataframe(alldata)
chev_df = alldata_df
save(chev_df,file = 'chevrolet.RData')
load('toyota.RData')
load('smart.RData')
load('chevrolet.RData')
load('honda.RData')
load('ford.RData')
load('nissan.RData')
OEM_list = list(nullToNA(chev_df),nullToNA(toyota_df),nullToNA(smart_df),nullToNA(honda_df),nullToNA(ford_df),nullToNA(nissan_df))
ndf <- Reduce(function(x, y) rbind(x, y), OEM_list)
ndf <- ndf[!duplicated(ndf$VIN),]
df <- ndf
dim(df)
save(df,file='ndf.RData')
runApp()
library(shinyapps)
deployApp()
deployApp()
runApp()
deployApp()
deployApp()
load("~/Desktop/InternPI/Dealership-Scraping/madata.rdata")
View(madata)
unique(madata$Make)
deployApp()
deployApp()
require(leaflet)
(m <- leaflet() %>% addTiles())
m %>% setView(lng = -1.5, lat = 53.4, zoom = 10)
(m2 <- m %>%
setView(-1.5, 53.4, 10) %>% # map location
addMarkers(-1.4, 53.5) %>% # add a marker
addPopups(-1.6, 53.3, popup = "Hello Sheffield!") %>% # popup
# add som circles:
addCircles(color = "black", runif(90, -2, -1), runif(90, 53, 54), runif(90, 10, 500)))
url = "https://github.com/Robinlovelace/sdvwR/raw/master/data/gps-trace.gpx"
download.file(url, destfile = "shef2leeds.gpx", method = "wget")
library(rgdal)
install.packages("rgdal")
library(rgdal)
shef2leeds <- readOGR("shef2leeds.gpx", layer = "tracks")
head(shef2leeds)
shef2leeds
m2 %>%
setView(-1.5, 53.4, 9) %>% # map location
addPolylines(data = shef2leeds, color = "red", weight = 4)
f = function(x) {
x = 2
x + 2
}
f(1)
x=f(5)
x
f(x=x)
load("madata.rdata")
load("madata.rdata")
dealerinfo = read.csv(file = './Dealers information/ChevroletMAdealers.csv',header = T,stringsAsFactors=F,row.names=F)
dealerinfo = read.csv(file = './Dealers information/ChevroletMAdealers.csv',header = T,stringsAsFactors=F)
dealerinfo = read.csv(file = './Dealers information/ChevroletMAdealers.csv',header = T,stringsAsFactors=F)
dealerinfo = read.csv(file = './Dealers information/ChevroletMAdealers.csv',header = T,stringsAsFactors=F)[,c('Name','Adress','GeoLatitude','GeoLongtitude')]
head(dealerinfo)
dim(dealerinfo)
require(dplyr)
dealer_ls = madata$Dealership
length(dealer_ls)
dealer_ls = unique(madata$Dealership)
length(dealer_ls)
dealerinfo <- dealerinfo  %>%
filter(Name %in% dealer_ls)
dim(dealerinfo)
dealerinfo <- dealerinfo  %>%
filter(Name %in% dealer_ls) %>%
filter(!duplicated(.))
dim(dealerinfo)
dealerinfo
list.files(path = './Dealers information/',pattern = '.csv')
all_csvfiles = list.files(path = './Dealers information/',pattern = '.csv')
allfiles_str = sapply(all_csvfiles,function(dir_str) paste0('./Dealers information/',dir_str))
allfiles_str
allfiles_str = unnames(sapply(all_csvfiles,function(dir_str) paste0('./Dealers information/',dir_str)))
allfiles_str = unname(sapply(all_csvfiles,function(dir_str) paste0('./Dealers information/',dir_str)))
allfiles_str
dealerinfo = ldply(allfiles_str, function(file_name) read.csv(file = file_name,header = T,stringsAsFactors=F)[,c('Name','Adress','GeoLatitude','GeoLongtitude')]
)
dim(dealerinfo)
dealerinfo <- dealerinfo  %>%
filter(Name %in% dealer_ls) %>%
filter(!duplicated(.))
dim(dealerinfo)
length(dealer_ls)
dim(dealerinfo)
dealer_ls
dealerinfo$Name[!dealerinfo$Name %in% dealer_ls]
dealerinfo$Name[!(dealerinfo$Name %in% dealer_ls)]
unique(dealerinfo$Name)
dealerinfo <- dealerinfo  %>%
filter(Name %in% dealer_ls) %>%
filter(!duplicated(Name))
dim(dealerinfo)
head(dealerinfo)
dealerinfo$zipcode = gsub('.*([0-9]{5}).*','\\1',dealerinfo$Name)
head(dealerinfo)
names(dealerinfo)
names(dealerinfo) =c('Name','Address','GeoLatitude','GeoLongitude')
head(dealerinfo)
dealerinfo = ldply(allfiles_str, function(file_name) read.csv(file = file_name,header = T,stringsAsFactors=F)[,c('Name','Adress','GeoLatitude','GeoLongtitude')]
)
names(dealerinfo) =c('Name','Address','GeoLatitude','GeoLongitude')
dim(dealerinfo)
dealerinfo <- dealerinfo  %>%
filter(Name %in% dealer_ls) %>%
filter(!duplicated(Name))
dealerinfo$zipcode = gsub('.*([0-9]{5}).*','\\1',dealerinfo$Address)
head(dealerinfo)
save(dealerinfo,'dealerinfo.rdata')
save(dealerinfo,file='dealerinfo.rdata')
length(dealer_ls)
dim(dealerinfo)
dealerinfo$state = gsub('.* (.*) [0-9]{5}.*','\\1',dealerinfo$Address)
head(dealerinfo)
save(dealerinfo,file='dealerinfo.rdata')
runApp()
load("finalMA.rdata")
load("new-madata.rdata") #example data
head(madata)
dealer_ls = unique(madata$Dealership)
length(dealer_ls)
require(dplyr)
all_csvfiles = list.files(path = './Dealers information/',pattern = '.csv')
allfiles_str = unname(sapply(all_csvfiles,function(dir_str) paste0('./Dealers information/',dir_str)))
dealerinfo = ldply(allfiles_str, function(file_name) read.csv(file = file_name,header = T,stringsAsFactors=F)[,c('Name','Adress','GeoLatitude','GeoLongtitude')])
names(dealerinfo) =c('Name','Address','GeoLatitude','GeoLongitude')
dim(dealerinfo)
#filter applicable and unduplicated rows
dealerinfo <- dealerinfo  %>%
filter(Name %in% dealer_ls) %>%
filter(!duplicated(Name))
#extract the zipcode for each dealerships
dealerinfo$zipcode = gsub('.*([0-9]{5}).*','\\1',dealerinfo$Address)
dealerinfo$state = gsub('.* (.*) [0-9]{5}.*','\\1',dealerinfo$Address)
head(dealerinfo)
summary(dealerinfo$zipcode)
as.numeric(dealerinfo$zipcode)
dealerinfo[132,]
dealerinfo[132,]$Address = "765 Memorial Dr, Chicopee, MA 01020"
dealerinfo[132,]$zipcode = gsub('.*([0-9]{5}).*','\\1',dealerinfo[132,]$Address)
dealerinfo[132,]$state = gsub('.* (.*) [0-9]{5}.*','\\1',dealerinfo[132,]$Address)
save(dealerinfo,file='dealerinfo.rdata')
Fruits
library(googleVis)
Fruit
Fruits
summary(Fruits)
class(Fruits$Year)
Bubble <- gvisBubbleChart(Fruit, idvar = "Fruit", xvar = 'Sales', yvar = 'Expenses', colorvar = 'Year',
sizevar = 'Profit', options=list(hAxis='{minValue:75,maxValue:125}'))
Bubble <- gvisBubbleChart(Fruits, idvar = "Fruit", xvar = 'Sales', yvar = 'Expenses', colorvar = 'Year',
sizevar = 'Profit', options=list(hAxis='{minValue:75,maxValue:125}'))
plot(Bubble)
Bubble <- gvisBubbleChart(Fruits,  xvar = 'Sales', yvar = 'Expenses', colorvar = 'Year',
sizevar = 'Profit', options=list(hAxis='{minValue:75,maxValue:125}'))
plot(Bubble)
Bubble <- gvisBubbleChart(Fruits, idvar = "Fruit", xvar = 'Sales', yvar = 'Expenses', colorvar = 'Fruit',
sizevar = 'Profit', options=list(hAxis='{minValue:75,maxValue:125}'))
plot(Bubble)
